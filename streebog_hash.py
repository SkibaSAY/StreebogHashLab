"""
Модуль работы с hash функцией Стрибок
https://habr.com/ru/articles/188152/
"""
from typing import List

class Streebog:
    """
    Реализация ГОСТ хэш функции Стрибог
    """
    def X_transform(self, k:List[int], a:List[int]) -> List[int]:
        """
        k XOR a
        """
        return [x1 ^ x2 for x1, x2 in zip(k, a)]
        #return bytes(int.from_bytes(k) ^ int.from_bytes(a))
    
    
    pi = [
        0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
        0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
        0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
        0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
        0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
        0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
        0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
        0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
        0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
        0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
        0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
        0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
        0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
        0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
        0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
        0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
    ]
    def S_transform(self, a:List[int]) -> List[int]:
        """
        S-преобразование последовательности байт с использованием фиксированных табличных перестановок
        """
        return [self.pi[x] for x in a]


    tau = [
    0, 8, 16, 24, 32, 40, 48, 56,
    1, 9, 17, 25, 33, 41, 49, 57,
    2, 10, 18, 26, 34, 42, 50, 58,
    3, 11, 19, 27, 35, 43, 51, 59,
    4, 12, 20, 28, 36, 44, 52, 60,
    5, 13, 21, 29, 37, 45, 53, 61,
    6, 14, 22, 30, 38, 46, 54, 62,
    7, 15, 23, 31, 39, 47, 55, 63
    ]
    def P_transform(self, a:List[int]) -> List[int]:
        """
        Функция перестановки. Для каждой пары байт из входной последовательности происходит замена одного байта другим.
        """
        return [a[self.tau[i]] for i in range(0,64)]
    
# Исходный вид
#    A = 
#    [
# 0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
# 0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
# 0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
# 0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
# 0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
# 0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
# 0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
# 0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
# 0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
# 0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
# 0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
# 0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
# 0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
# 0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
# 0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
# 0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
#     ]
# код для конвертации
# temp = [x.to_bytes(8,byteorder='big') for x in A]
    
# result = []
# for arr in temp:
#     result.append([x for x in arr])   
# print(result)
    # Преобразованный вид
    A = [[142, 32, 250, 167, 43, 160, 180, 112], [71, 16, 125, 221, 155, 80, 90, 56], [173, 8, 176, 224, 195, 40, 45, 28], [216, 4, 88, 112, 239, 20, 152, 14], [108, 2, 44, 56, 249, 10, 76, 7], [54, 1, 22, 28, 242, 5, 38, 141], [27, 142, 11, 14, 121, 140, 19, 200], [131, 71, 139, 7, 178, 70, 135, 100], [160, 17, 211, 128, 129, 142, 143, 64], [80, 134, 231, 64, 206, 71, 201, 32], [40, 67, 253, 32, 103, 173, 234, 16], [20, 175, 240, 16, 189, 216, 117, 8], [10, 217, 120, 8, 208, 108, 180, 4], [5, 226, 60, 4, 104, 54, 90, 2], [140, 113, 30, 2, 52, 27, 45, 1], [70, 182, 15, 1, 26, 131, 152, 142], [144, 218, 181, 42, 56, 122, 231, 111], [72, 109, 212, 21, 28, 61, 253, 185], [36, 184, 106, 132, 14, 144, 240, 210], [18, 92, 53, 66, 7, 72, 120, 105], [9, 46, 148, 33, 141, 36, 60, 186], [138, 23, 74, 158, 200, 18, 30, 93], [69, 133, 37, 79, 100, 9, 15, 160], [172, 204, 156, 169, 50, 138, 137, 80], [157, 77, 240, 93, 95, 102, 20, 81], [192, 168, 120, 160, 161, 51, 10, 166], [96, 84, 60, 80, 222, 151, 5, 83], [48, 42, 30, 40, 111, 197, 140, 167], [24, 21, 15, 20, 185, 236, 70, 221], [12, 132, 137, 10, 210, 118, 35, 224], [6, 66, 202, 5, 105, 59, 159, 112], [3, 33, 101, 140, 186, 147, 193, 56], [134, 39, 93, 240, 156, 232, 170, 168], [67, 157, 160, 120, 78, 116, 85, 84], [175, 192, 80, 60, 39, 58, 164, 42], [217, 96, 40, 30, 157, 29, 82, 21], [226, 48, 20, 15, 192, 128, 41, 132], [113, 24, 10, 137, 96, 64, 154, 66], [182, 12, 5, 202, 48, 32, 77, 33], [91, 6, 140, 101, 24, 16, 168, 158], [69, 108, 52, 136, 122, 56, 5, 185], [172, 54, 26, 68, 61, 28, 140, 210], [86, 27, 13, 34, 144, 14, 70, 105], [43, 131, 136, 17, 72, 7, 35, 186], [155, 207, 68, 134, 36, 141, 159, 93], [195, 233, 34, 67, 18, 200, 193, 160], [239, 250, 17, 175, 9, 100, 238, 80], [249, 125, 134, 217, 138, 50, 119, 40], [228, 250, 32, 84, 168, 11, 50, 156], [114, 125, 16, 42, 84, 139, 25, 78], [57, 176, 8, 21, 42, 203, 130, 39], [146, 88, 4, 132, 21, 235, 65, 157], [73, 44, 2, 66, 132, 251, 174, 192], [170, 22, 1, 33, 66, 243, 87, 96], [85, 11, 142, 158, 33, 247, 165, 48], [164, 139, 71, 79, 158, 245, 220, 24], [112, 166, 165, 110, 36, 64, 89, 142], [56, 83, 220, 55, 18, 32, 162, 71], [28, 167, 110, 149, 9, 16, 81, 173], [14, 221, 55, 196, 138, 8, 166, 216], [7, 224, 149, 98, 69, 4, 83, 108], [141, 112, 196, 49, 172, 2, 167, 54], [200, 56, 98, 150, 86, 1, 221, 27], [100, 28, 49, 75, 43, 142, 224, 131]]
    def l_transform(self, a:List[int]) -> List[int]:
        """
        Представляет собой умножение 64-битного входного вектора на бинарную матрицу A размерами 64x64.
        На выходе 8 байт
        """
        result = [0x00]*8
        # На каждом шаге мы получаем бит = результат умножения вектора на строку матрицы А
        # Бит - это часть байта
        # По i можно вычислить в какой байт и какую сумму вносит бит
        for i in range(0, 64):
            b = self.A[i]
            # перемножили строку на столбец и просуммировали биты, получили бит
            res = [bin(a & b) for a,b in zip(a, b)] # 8 байт - результат побитового И
            # просуммировали биты по всем 8 байтам
            bit = sum([x.count('1') for x in res]) % 2 # значение бита на i-м шаге
            # Добавляем бит в свой байт
            if bit == 1:
                result[i//8]+=2**(7-i%8) # это нужно осмыслять, но всё верно
        
        return result


    def L_transform(self, a:List[int]) -> List[int]:
        """
        L: V512 -> V512
        512 бит разбиваются на 8 блоков по 64 бит и обрабатываются отдельно функцией l
        L(a) = L(a7||a6||..||a0) = l(a7)||..||l(a0)
        """
        result = []
        for i in range(0,8):
            result+=self.l_transform(a[i*8:(i+1)*8])
        return result


    def g(self, N:List[int], m:List[int], h:List[int]) -> List[int]:
        """
        Используемая в новом стандарте функцию сжатия gn
        Пусть h, N и m — 512-битные последовательности.
        """
        K = self.X_transform(h, N)
        K = self.S_transform(K)
        K = self.P_transform(K)
        K = self.L_transform(K)
        # Исп функция E(K, m)
        t = self.E(K, m)
        t = self.X_transform(h, t)
        G = self.X_transform(t, m)
        return G
    

    def E(self, K:List[int], m:List[int]) -> List[int]:
        """
        
        """
        state = self.X_transform(K, m)
        for i in range(12):
            state = self.S_transform(state)
            state = self.P_transform(state)
            state = self.L_transform(state)
            K = self.KeySchedule(K, i)
            state = self.X_transform(state, K)
        return state

    C = [
        [
        0xb1,0x08,0x5b,0xda,0x1e,0xca,0xda,0xe9,0xeb,0xcb,0x2f,0x81,0xc0,0x65,0x7c,0x1f,
        0x2f,0x6a,0x76,0x43,0x2e,0x45,0xd0,0x16,0x71,0x4e,0xb8,0x8d,0x75,0x85,0xc4,0xfc,
        0x4b,0x7c,0xe0,0x91,0x92,0x67,0x69,0x01,0xa2,0x42,0x2a,0x08,0xa4,0x60,0xd3,0x15,
        0x05,0x76,0x74,0x36,0xcc,0x74,0x4d,0x23,0xdd,0x80,0x65,0x59,0xf2,0xa6,0x45,0x07
        ],
        [
        0x6f,0xa3,0xb5,0x8a,0xa9,0x9d,0x2f,0x1a,0x4f,0xe3,0x9d,0x46,0x0f,0x70,0xb5,0xd7,
        0xf3,0xfe,0xea,0x72,0x0a,0x23,0x2b,0x98,0x61,0xd5,0x5e,0x0f,0x16,0xb5,0x01,0x31,
        0x9a,0xb5,0x17,0x6b,0x12,0xd6,0x99,0x58,0x5c,0xb5,0x61,0xc2,0xdb,0x0a,0xa7,0xca,
        0x55,0xdd,0xa2,0x1b,0xd7,0xcb,0xcd,0x56,0xe6,0x79,0x04,0x70,0x21,0xb1,0x9b,0xb7
        ],
        [
        0xf5,0x74,0xdc,0xac,0x2b,0xce,0x2f,0xc7,0x0a,0x39,0xfc,0x28,0x6a,0x3d,0x84,0x35,
        0x06,0xf1,0x5e,0x5f,0x52,0x9c,0x1f,0x8b,0xf2,0xea,0x75,0x14,0xb1,0x29,0x7b,0x7b,
        0xd3,0xe2,0x0f,0xe4,0x90,0x35,0x9e,0xb1,0xc1,0xc9,0x3a,0x37,0x60,0x62,0xdb,0x09,
        0xc2,0xb6,0xf4,0x43,0x86,0x7a,0xdb,0x31,0x99,0x1e,0x96,0xf5,0x0a,0xba,0x0a,0xb2
        ],
        [
        0xef,0x1f,0xdf,0xb3,0xe8,0x15,0x66,0xd2,0xf9,0x48,0xe1,0xa0,0x5d,0x71,0xe4,0xdd,
        0x48,0x8e,0x85,0x7e,0x33,0x5c,0x3c,0x7d,0x9d,0x72,0x1c,0xad,0x68,0x5e,0x35,0x3f,
        0xa9,0xd7,0x2c,0x82,0xed,0x03,0xd6,0x75,0xd8,0xb7,0x13,0x33,0x93,0x52,0x03,0xbe,
        0x34,0x53,0xea,0xa1,0x93,0xe8,0x37,0xf1,0x22,0x0c,0xbe,0xbc,0x84,0xe3,0xd1,0x2e
        ],
        [
        0x4b,0xea,0x6b,0xac,0xad,0x47,0x47,0x99,0x9a,0x3f,0x41,0x0c,0x6c,0xa9,0x23,0x63,
        0x7f,0x15,0x1c,0x1f,0x16,0x86,0x10,0x4a,0x35,0x9e,0x35,0xd7,0x80,0x0f,0xff,0xbd,
        0xbf,0xcd,0x17,0x47,0x25,0x3a,0xf5,0xa3,0xdf,0xff,0x00,0xb7,0x23,0x27,0x1a,0x16,
        0x7a,0x56,0xa2,0x7e,0xa9,0xea,0x63,0xf5,0x60,0x17,0x58,0xfd,0x7c,0x6c,0xfe,0x57
        ],
        [
        0xae,0x4f,0xae,0xae,0x1d,0x3a,0xd3,0xd9,0x6f,0xa4,0xc3,0x3b,0x7a,0x30,0x39,0xc0,
        0x2d,0x66,0xc4,0xf9,0x51,0x42,0xa4,0x6c,0x18,0x7f,0x9a,0xb4,0x9a,0xf0,0x8e,0xc6,
        0xcf,0xfa,0xa6,0xb7,0x1c,0x9a,0xb7,0xb4,0x0a,0xf2,0x1f,0x66,0xc2,0xbe,0xc6,0xb6,
        0xbf,0x71,0xc5,0x72,0x36,0x90,0x4f,0x35,0xfa,0x68,0x40,0x7a,0x46,0x64,0x7d,0x6e
        ],
        [
        0xf4,0xc7,0x0e,0x16,0xee,0xaa,0xc5,0xec,0x51,0xac,0x86,0xfe,0xbf,0x24,0x09,0x54,
        0x39,0x9e,0xc6,0xc7,0xe6,0xbf,0x87,0xc9,0xd3,0x47,0x3e,0x33,0x19,0x7a,0x93,0xc9,
        0x09,0x92,0xab,0xc5,0x2d,0x82,0x2c,0x37,0x06,0x47,0x69,0x83,0x28,0x4a,0x05,0x04,
        0x35,0x17,0x45,0x4c,0xa2,0x3c,0x4a,0xf3,0x88,0x86,0x56,0x4d,0x3a,0x14,0xd4,0x93
        ],
        [
        0x9b,0x1f,0x5b,0x42,0x4d,0x93,0xc9,0xa7,0x03,0xe7,0xaa,0x02,0x0c,0x6e,0x41,0x41,
        0x4e,0xb7,0xf8,0x71,0x9c,0x36,0xde,0x1e,0x89,0xb4,0x44,0x3b,0x4d,0xdb,0xc4,0x9a,
        0xf4,0x89,0x2b,0xcb,0x92,0x9b,0x06,0x90,0x69,0xd1,0x8d,0x2b,0xd1,0xa5,0xc4,0x2f,
        0x36,0xac,0xc2,0x35,0x59,0x51,0xa8,0xd9,0xa4,0x7f,0x0d,0xd4,0xbf,0x02,0xe7,0x1e
        ],
        [
        0x37,0x8f,0x5a,0x54,0x16,0x31,0x22,0x9b,0x94,0x4c,0x9a,0xd8,0xec,0x16,0x5f,0xde,
        0x3a,0x7d,0x3a,0x1b,0x25,0x89,0x42,0x24,0x3c,0xd9,0x55,0xb7,0xe0,0x0d,0x09,0x84,
        0x80,0x0a,0x44,0x0b,0xdb,0xb2,0xce,0xb1,0x7b,0x2b,0x8a,0x9a,0xa6,0x07,0x9c,0x54,
        0x0e,0x38,0xdc,0x92,0xcb,0x1f,0x2a,0x60,0x72,0x61,0x44,0x51,0x83,0x23,0x5a,0xdb
        ],
        [
        0xab,0xbe,0xde,0xa6,0x80,0x05,0x6f,0x52,0x38,0x2a,0xe5,0x48,0xb2,0xe4,0xf3,0xf3,
        0x89,0x41,0xe7,0x1c,0xff,0x8a,0x78,0xdb,0x1f,0xff,0xe1,0x8a,0x1b,0x33,0x61,0x03,
        0x9f,0xe7,0x67,0x02,0xaf,0x69,0x33,0x4b,0x7a,0x1e,0x6c,0x30,0x3b,0x76,0x52,0xf4,
        0x36,0x98,0xfa,0xd1,0x15,0x3b,0xb6,0xc3,0x74,0xb4,0xc7,0xfb,0x98,0x45,0x9c,0xed
        ],
        [
        0x7b,0xcd,0x9e,0xd0,0xef,0xc8,0x89,0xfb,0x30,0x02,0xc6,0xcd,0x63,0x5a,0xfe,0x94,
        0xd8,0xfa,0x6b,0xbb,0xeb,0xab,0x07,0x61,0x20,0x01,0x80,0x21,0x14,0x84,0x66,0x79,
        0x8a,0x1d,0x71,0xef,0xea,0x48,0xb9,0xca,0xef,0xba,0xcd,0x1d,0x7d,0x47,0x6e,0x98,
        0xde,0xa2,0x59,0x4a,0xc0,0x6f,0xd8,0x5d,0x6b,0xca,0xa4,0xcd,0x81,0xf3,0x2d,0x1b
        ],
        [
        0x37,0x8e,0xe7,0x67,0xf1,0x16,0x31,0xba,0xd2,0x13,0x80,0xb0,0x04,0x49,0xb1,0x7a,
        0xcd,0xa4,0x3c,0x32,0xbc,0xdf,0x1d,0x77,0xf8,0x20,0x12,0xd4,0x30,0x21,0x9f,0x9b,
        0x5d,0x80,0xef,0x9d,0x18,0x91,0xcc,0x86,0xe7,0x1d,0xa4,0xaa,0x88,0xe1,0x28,0x52,
        0xfa,0xf4,0x17,0xd5,0xd9,0xb2,0x1b,0x99,0x48,0xbc,0x92,0x4a,0xf1,0x1b,0xd7,0x20
        ]
    ]
    def KeySchedule(self,K:List[int], i:int) -> List[int]:
        """
        Ключевое расписание: Отвечает за формирование временного ключа K на каждом раунде функции E(K, m)
        """
        K = self.X_transform(K, self.C[i])
        K = self.S_transform(K)
        K = self.P_transform(K)
        K = self.L_transform(K)
        return K

    def _add_mod512(self, x1: List[int], x2: List[int]) -> List[int]:
        """
        Берём x1 + x2 mod 2^512
        """
        result = [0x00]*64
        x1_ext = [0x00]*(64-len(x1))+x1
        x2_ext = [0x00]*(64-len(x2))+x2
        _last = 0
        for i in range(64)[::-1]:
            _last = x1_ext[i] + x2_ext[i] + (_last >> 8)
            result[i] = _last & 0xFF
        return result


    def GetHashByBits(self, M_bits: str, msb: int = 256) -> List[int]:
        """
        Получает хэш от переданного набора бит
        Вход: битовая строка без префиксов, например '1100' или '11' преобразуются в '11000000' потом в байт
        Вход автоматически дополняется нулями до полных байт
        """
        res = []
        n = len(M_bits)
        iter_count = len(M_bits) // 8
        for i in range(iter_count):
            res.append(int(M_bits[i*8:(i+1)*8], 2))
        
        # Обрабатываем неполное окончание
        if n % 8 != 0:
            part = M_bits[iter_count * 8: n]
            part = '0'*(8-len(part)) + part
            res.append(int(part, 2))
        return self.GetHash(res, msb)


    def GetHash(self, M: List[int], msb: int = 256) -> str:
        """
        Основная функция для внешнего вызова
        msb - число бит
        """
        result = self._GetHash(M, msb)
        return ''.join([hex(x)[2:] for x in result])


    def _GetHash(self, M: List[int], msb: int) -> List[int]:
        """
        Основная функция для внешнего вызова
        """
        if msb == 256:
            # Спросить почему так делают
            iv = [0x01]*64
        else:
            iv = [0x00]*64
        h = iv
        N = [0x00]*64
        Sigma = [0x00]*64

        cur_len = len(M)
        # Шаг 2
        while cur_len >= 64:
            m = M[cur_len - 64: cur_len]
            h = self.g(N, m, h)
            # N + 512 mod 2^512
            N = self._add_mod512(N, [0x02,0x00])
            Sigma = self._add_mod512(Sigma, m)
            M = M[0: cur_len - 64]
            cur_len = len(M)
        # Шаг 3: Произвести дополнение сообщения M до длины в 512 бит
        m = [0x00]*(63-len(M)) + [0x01] + M
        
        # Шаги 4 - 9
        h = self.g(N, m, h)
        # M - массив байт, поэтому  * 8 = число бит, далее конветрируем в байты, чтобы применить add_mod512
        len_M_as_bites = [x for x in (len(M) * 8).to_bytes(2,byteorder='big')]
        N = self._add_mod512(N, len_M_as_bites)
        Sigma = self._add_mod512(Sigma, m)
        h = self.g([0x00]*64, h, N)
        # h = self.g([0x00]*64, h, Sigma)
        h = self.g([0x00]*64, Sigma, h)
        # Возвращение результата:
        if msb == 512:
            return h
        else:
            return self._Msb(h, msb)

    def _Msb(self, h: List[int], msb: int) -> List[int]:
        """
        В зависимости от n пространство значений hash функции
        n - число первых бит, которые берутся, остальное заполняется нулями
        """
        part_byte_index = msb // 8
        res = h[0 : part_byte_index]
        # Дополняем неполный кусочек до байта
        t = msb % 8
        if t:          
            # Урезали полученный байт по числу доступных битов
            part = h[part_byte_index] & int('1' * t + '0' * (8 - t), 2)
            res.append(part)
        return res
